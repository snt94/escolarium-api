// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id             String          @id @default(uuid())
  name           String
  cnpj           String
  address        String
  createdAt      DateTime        @default(now())
  
  users          User[]
  classes        Class[]
  communications Communication[]
  calendar       Calendar[]
  files          File[]
  schedules      Schedule[]
  messages       Message[]
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String @unique
  hash  String

  firstName String?
  lastName  String?

  role     String?
  schoolId String

  school           School          @relation(fields: [schoolId], references: [id])
  student          Student?
  teacher          Teacher?
  guardian         Guardian?
  notifications    Notification[]
  messagesSent     Message[]       @relation("SentMessages")
  messagesReceived Message[]       @relation("ReceivedMessages")
  filesUploaded    File[]          @relation("UploadedFiles")
  Communication    Communication[]

  @@map("users")
}

model Student {
  id                 Int      @id @default(autoincrement())
  createdAt          DateTime @default(now())
  userId             Int      @unique
  birthDate          DateTime
  registrationNumber String

  user         User              @relation(fields: [userId], references: [id])
  enrollments  Enrollment[]
  grades       Grade[]
  attendances  Attendance[]
  studentTasks StudentTask[]
  guardians    StudentGuardian[]
}

model Teacher {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    Int      @unique

  user      User       @relation(fields: [userId], references: [id])
  subjects  Subject[]
  grades    Grade[]
  schedules Schedule[]
  tasks     Task[]     @relation("AssignedTasks")
}

model Class {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  name         String
  academicYear Int
  schoolId     String

  school      School       @relation(fields: [schoolId], references: [id])
  enrollments Enrollment[]
  subjects    Subject[]
  calendar    Calendar[]
  tasks       Task[]
  schedules   Schedule[]
}

model Subject {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  name      String
  classId   Int
  teacherId Int

  class       Class         @relation(fields: [classId], references: [id])
  teacher     Teacher       @relation(fields: [teacherId], references: [id])
  grades      Grade[]
  attendances Attendance[]
  tasks       Task[]
  files       SubjectFile[]
  schedules   Schedule[]
}

model Enrollment {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  studentId      Int
  classId        Int
  enrollmentDate DateTime

  student Student @relation(fields: [studentId], references: [id])
  class   Class   @relation(fields: [classId], references: [id])
}

model Grade {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  studentId Int
  subjectId Int
  bimestre  Int
  value     Float
  teacherId Int

  student Student @relation(fields: [studentId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])
  teacher Teacher @relation(fields: [teacherId], references: [id])
}

model Attendance {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  studentId Int
  subjectId Int
  date      DateTime
  isPresent Boolean

  student Student @relation(fields: [studentId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])
}

model Communication {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  schoolId  String
  authorId  Int
  title     String
  body      String

  school School @relation(fields: [schoolId], references: [id])
  author User   @relation(fields: [authorId], references: [id])
}

model Task {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  title        String
  description  String
  dueDate      DateTime
  subjectId    Int
  assignedById Int
  classId      Int

  subject      Subject       @relation(fields: [subjectId], references: [id])
  assignedBy   Teacher       @relation("AssignedTasks", fields: [assignedById], references: [id])
  class        Class         @relation(fields: [classId], references: [id])
  studentTasks StudentTask[]
  files        TaskFile[]
}

model StudentTask {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  taskId         Int
  studentId      Int
  status         String
  submissionDate DateTime
  grade          Float

  task    Task    @relation(fields: [taskId], references: [id])
  student Student @relation(fields: [studentId], references: [id])
}

model Calendar {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  title       String
  description String
  date        DateTime
  startTime   String
  endTime     String
  schoolId    String
  classId     Int

  school School @relation(fields: [schoolId], references: [id])
  class  Class  @relation(fields: [classId], references: [id])
}

model Notification {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  userId    Int
  title     String
  message   String
  sentAt    DateTime
  readAt    DateTime?

  user User @relation(fields: [userId], references: [id])
}

model Guardian {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  userId           Int      @unique
  relationshipType String

  user     User              @relation(fields: [userId], references: [id])
  students StudentGuardian[]
}

model StudentGuardian {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  studentId  Int
  guardianId Int

  student  Student  @relation(fields: [studentId], references: [id])
  guardian Guardian @relation(fields: [guardianId], references: [id])
}

model File {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  fileName     String
  filePath     String
  fileType     String
  fileSize     Float
  uploadedById Int
  schoolId     String

  uploadedBy  User          @relation("UploadedFiles", fields: [uploadedById], references: [id])
  school      School        @relation(fields: [schoolId], references: [id])
  SubjectFile SubjectFile[]
  TaskFile    TaskFile[]
}

model SubjectFile {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  subjectId Int
  fileId    Int

  subject Subject @relation(fields: [subjectId], references: [id])
  file    File    @relation(fields: [fileId], references: [id])
}

model TaskFile {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  taskId    Int
  fileId    Int

  task Task @relation(fields: [taskId], references: [id])
  file File @relation(fields: [fileId], references: [id])
}

model Schedule {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  schoolId  String
  classId   Int
  subjectId Int
  teacherId Int
  dayOfWeek String
  startTime String
  endTime   String
  location  String

  school  School  @relation(fields: [schoolId], references: [id])
  class   Class   @relation(fields: [classId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])
  teacher Teacher @relation(fields: [teacherId], references: [id])
}

model Message {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  senderId   Int
  receiverId Int
  subject    String
  body       String
  sentAt     DateTime
  readAt     DateTime?
  schoolId   String

  sender   User   @relation("SentMessages", fields: [senderId], references: [id])
  receiver User   @relation("ReceivedMessages", fields: [receiverId], references: [id])
  school   School @relation(fields: [schoolId], references: [id])
}
